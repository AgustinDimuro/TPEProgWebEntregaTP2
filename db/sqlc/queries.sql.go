// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createCabin = `-- name: CreateCabin :one

INSERT INTO cabins (email_contact, phone_contact, password)
VALUES ($1, $2, $3)
RETURNING id, email_contact, phone_contact, password, created_at
`

type CreateCabinParams struct {
	EmailContact string `json:"email_contact"`
	PhoneContact string `json:"phone_contact"`
	Password     string `json:"password"`
}

// CRUD de cabins
func (q *Queries) CreateCabin(ctx context.Context, arg CreateCabinParams) (Cabin, error) {
	row := q.db.QueryRowContext(ctx, createCabin, arg.EmailContact, arg.PhoneContact, arg.Password)
	var i Cabin
	err := row.Scan(
		&i.ID,
		&i.EmailContact,
		&i.PhoneContact,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const createReservation = `-- name: CreateReservation :one

INSERT INTO reservations (cabin_id, fecha)
VALUES ($1, $2)
RETURNING id, cabin_id, fecha, created_at
`

type CreateReservationParams struct {
	CabinID int32     `json:"cabin_id"`
	Fecha   time.Time `json:"fecha"`
}

// CRUD de reservations
func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, createReservation, arg.CabinID, arg.Fecha)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.CabinID,
		&i.Fecha,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCabin = `-- name: DeleteCabin :exec
DELETE FROM cabins WHERE id = $1
`

func (q *Queries) DeleteCabin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCabin, id)
	return err
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservations WHERE id = $1
`

func (q *Queries) DeleteReservation(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteReservation, id)
	return err
}

const getCabin = `-- name: GetCabin :one
SELECT id, email_contact, phone_contact, password, created_at FROM cabins WHERE id = $1
`

func (q *Queries) GetCabin(ctx context.Context, id int32) (Cabin, error) {
	row := q.db.QueryRowContext(ctx, getCabin, id)
	var i Cabin
	err := row.Scan(
		&i.ID,
		&i.EmailContact,
		&i.PhoneContact,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getReservation = `-- name: GetReservation :one
SELECT id, cabin_id, fecha, created_at FROM reservations WHERE id = $1
`

func (q *Queries) GetReservation(ctx context.Context, id int32) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservation, id)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.CabinID,
		&i.Fecha,
		&i.CreatedAt,
	)
	return i, err
}

const getReservationByFecha = `-- name: GetReservationByFecha :one
SELECT id, cabin_id, fecha, created_at FROM reservations WHERE fecha = $1
`

func (q *Queries) GetReservationByFecha(ctx context.Context, fecha time.Time) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservationByFecha, fecha)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.CabinID,
		&i.Fecha,
		&i.CreatedAt,
	)
	return i, err
}

const isFechaDisponible = `-- name: IsFechaDisponible :one
SELECT NOT EXISTS (
    SELECT 1 FROM reservations WHERE fecha = $1
    ) AS disponible
`

// Consultas
func (q *Queries) IsFechaDisponible(ctx context.Context, fecha time.Time) (bool, error) {
	row := q.db.QueryRowContext(ctx, isFechaDisponible, fecha)
	var disponible bool
	err := row.Scan(&disponible)
	return disponible, err
}

const listCabins = `-- name: ListCabins :many
SELECT id, email_contact, phone_contact, password, created_at FROM cabins ORDER BY id
`

func (q *Queries) ListCabins(ctx context.Context) ([]Cabin, error) {
	rows, err := q.db.QueryContext(ctx, listCabins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cabin
	for rows.Next() {
		var i Cabin
		if err := rows.Scan(
			&i.ID,
			&i.EmailContact,
			&i.PhoneContact,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReservations = `-- name: ListReservations :many
SELECT r.id, r.cabin_id, r.fecha, r.created_at,
       c.email_contact, c.phone_contact
FROM reservations r
JOIN cabins c ON c.id = r.cabin_id
ORDER BY r.fecha DESC
`

type ListReservationsRow struct {
	ID           int32     `json:"id"`
	CabinID      int32     `json:"cabin_id"`
	Fecha        time.Time `json:"fecha"`
	CreatedAt    time.Time `json:"created_at"`
	EmailContact string    `json:"email_contact"`
	PhoneContact string    `json:"phone_contact"`
}

func (q *Queries) ListReservations(ctx context.Context) ([]ListReservationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListReservationsRow
	for rows.Next() {
		var i ListReservationsRow
		if err := rows.Scan(
			&i.ID,
			&i.CabinID,
			&i.Fecha,
			&i.CreatedAt,
			&i.EmailContact,
			&i.PhoneContact,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReservationsByCabin = `-- name: ListReservationsByCabin :many
SELECT id, cabin_id, fecha, created_at FROM reservations
WHERE cabin_id = $1
ORDER BY fecha DESC
`

func (q *Queries) ListReservationsByCabin(ctx context.Context, cabinID int32) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, listReservationsByCabin, cabinID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.CabinID,
			&i.Fecha,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCabin = `-- name: UpdateCabin :one
UPDATE cabins
SET email_contact = $2,
    phone_contact = $3,
    password = $4
WHERE id = $1
RETURNING id, email_contact, phone_contact, password, created_at
`

type UpdateCabinParams struct {
	ID           int32  `json:"id"`
	EmailContact string `json:"email_contact"`
	PhoneContact string `json:"phone_contact"`
	Password     string `json:"password"`
}

func (q *Queries) UpdateCabin(ctx context.Context, arg UpdateCabinParams) (Cabin, error) {
	row := q.db.QueryRowContext(ctx, updateCabin,
		arg.ID,
		arg.EmailContact,
		arg.PhoneContact,
		arg.Password,
	)
	var i Cabin
	err := row.Scan(
		&i.ID,
		&i.EmailContact,
		&i.PhoneContact,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateReservationCabin = `-- name: UpdateReservationCabin :one
UPDATE reservations
SET cabin_id = $2
WHERE id = $1
RETURNING id, cabin_id, fecha, created_at
`

type UpdateReservationCabinParams struct {
	ID      int32 `json:"id"`
	CabinID int32 `json:"cabin_id"`
}

func (q *Queries) UpdateReservationCabin(ctx context.Context, arg UpdateReservationCabinParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, updateReservationCabin, arg.ID, arg.CabinID)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.CabinID,
		&i.Fecha,
		&i.CreatedAt,
	)
	return i, err
}

const updateReservationFecha = `-- name: UpdateReservationFecha :one
UPDATE reservations
SET fecha = $2
WHERE id = $1
RETURNING id, cabin_id, fecha, created_at
`

type UpdateReservationFechaParams struct {
	ID    int32     `json:"id"`
	Fecha time.Time `json:"fecha"`
}

func (q *Queries) UpdateReservationFecha(ctx context.Context, arg UpdateReservationFechaParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, updateReservationFecha, arg.ID, arg.Fecha)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.CabinID,
		&i.Fecha,
		&i.CreatedAt,
	)
	return i, err
}
